import java.util.*;

public class LinkedListOperations {
    
    public class ListNode {
        int val;
        ListNode next;
        ListNode() {}
        ListNode(int val) { this.val = val; }
        ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    }

    // Method to insert a new node at the end of the list
    public ListNode insertEnd(ListNode head, int val) {
        ListNode newNode = new ListNode(val);
        if (head == null) {
            return newNode;
        }
        ListNode current = head;  
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
        return head;
    }

    // Method to insert a new node at the beginning of the list
    public ListNode insertBegin(ListNode head, int val) {
        ListNode newNode = new ListNode(val);
        newNode.next = head;
        return newNode;
    }

    // Method to insert a new node at a specific position
    public ListNode insertAtPosition(ListNode head, int val, int position) {
        if (position == 0) {
            return insertBegin(head, val);
        }
        ListNode newNode = new ListNode(val);
        ListNode current = head;
        for (int i = 0; i < position - 1 && current != null; i++) {
            current = current.next;
        }
        if (current == null) {
            return head; // Position is greater than the length of the list
        }
        newNode.next = current.next;
        current.next = newNode;
        return head;
    }

    // Method to delete a node at a specific position
    public ListNode deleteAtPosition(ListNode head, int position) {
        if (head == null) {
            return null;
        }
        if (position == 0) {
            return head.next; // Remove head node
        }
        ListNode current = head;
        for (int i = 0; i < position - 1 && current != null; i++) {
            current = current.next;
        }
        if (current == null || current.next == null) {
            return head; // Position is greater than the length of the list
        }
        current.next = current.next.next; // Skip the node to delete
        return head;
    }

    // Method to reverse the linked list
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        while (current != null) {
            ListNode next = current.next; // Save next node
            current.next = prev; // Reverse the link
            prev = current; // Move prev to current
            current = next; // Move to the next node
        }
        return prev; // New head of the reversed list
    }

    // Method to find the nth node from the end
    public ListNode nthFromEnd(ListNode head, int n) {
        ListNode first = head;
        ListNode second = head;
        for (int i = 0; i < n; i++) {
            if (first == null) return null; // If n is greater than the length
            first = first.next;
        }
        while (first != null) {
            first = first.next;
            second = second.next;
        }
        return second; // The nth node from the end
    }

    // Method to detect a cycle in the linked list
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next; // Move slow by 1
            fast = fast.next.next; // Move fast by 2
            if (slow == fast) {
                return true; // Cycle detected
            }
        }
        return false; // No cycle
    }

    // Method to delete the first occurrence of a node with a given value
    public ListNode deleteValue(ListNode head, int val) {
        if (head == null) {
            return null;
        }
        if (head.val == val) {
            return head.next; // Remove head node
        }
        ListNode current = head;
        while (current.next != null && current.next.val != val) {
            current = current.next;
        }
        if (current.next != null) {
            current.next = current.next.next; // Skip the node to delete
        }
        return head;
    }

    // Method to search for a value in the list
    public boolean search(ListNode head, int val) {
        ListNode current = head;
        while (current != null) {
            if (current.val == val) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // Method to find the length of the list
    public int length(ListNode head) {
        int length = 0;
        ListNode current = head;
        while (current != null) {
            length++;
            current = current.next;
        }
        return length;
    }

    // Method to print the list
    public void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        LinkedListOperations list = new LinkedListOperations();
        ListNode head = null;

        // Insert at end
        head = list.insertEnd(head, 1);
        head = list.insertEnd(head, 2);
        head = list.insertEnd(head, 3);
        head = list.insertEnd(head, 4);
        list.printList(head); // Output: 1 -> 2 -> 3 -> 4 -> null

        // Insert at beginning
        head = list.insertBegin(head, 0);
        list.printList(head); // Output: 0 -> 1 -> 2 -> 3 -> 4 -> null

        // Insert at specific position
        head = list.insertAtPosition(head, 5, 3);
        list.printList(head); // Output: 0 -> 1 -> 2 -> 5 -> 3 -> 4 -> null

        // Delete at specific position
        head = list.deleteAtPosition(head, 2);
        list.printList(head); // Output: 0 -> 1 -> 5 -> 3 -> 4 -> null

        // Reverse the list
        head = list.reverseList(head);
        list.printList(head); // Output: 4 -> 3 -> 5 -> 1 -> 0 -> null

        // Find nth node from the end
        ListNode nthNode = list.nthFromEnd(head, 2);
        if (nthNode != null) {
            System.out.println("2nd node from end: " + nthNode.val); // Output: 1
        }

        // Check for cycle
        System.out.println("Has cycle: " + list.hasCycle(head)); // Output: false

        // Delete value
        head = list.deleteValue(head, 3);
        list.printList(head); // Output: 4 -> 5 -> 1 -> 0 -> null

        // Search value
        System.out.println(list.search(head, 2)); // Output: false
        System.out.println(list.search(head, 5)); // Output: true

        // Find length
        System.out.println("Length of list: " + list.length(head)); // Output: Length of list: 4
    }
}
